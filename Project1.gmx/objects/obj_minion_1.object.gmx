<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bro</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_hitable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>step_size = random_range(rel_speed(4), rel_speed(6));
look_ahead = 3;
moving = false;
head_towards = 0;
armor = 1;
hp_max = 7;
hp = hp_max;
loaded = true;
load_time = 0;
load_speed = room_speed * 2;
damage_min = 1;
damage_max = 4;
move_speed = 4;
waiting_to_move = true;
health_y_offset = 16;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving) {
    waiting_to_move = false;

    switch (head_towards) {
        case 0: {
            move_towards_x = room_width-sprite_xoffset;
            move_towards_y = y;
            break;
        }
        case 90: {
            move_towards_x = x;
            move_towards_y = sprite_yoffset;
            break;
        }
        case 180: {
            move_towards_x = -sprite_xoffset;
            move_towards_y = y;
            break;
        }
        case 270: {
            move_towards_x = x;
            move_towards_y = room_height-sprite_yoffset-health_y_offset;
            break;
        }
    }
    
    /*
    var move_towards_x = x + lengthdir_x(step_size * look_ahead, head_towards);
    var move_towards_y = y + lengthdir_y(step_size * look_ahead, head_towards);
    */
    var hit_towards_x = x + lengthdir_x(step_size * 2, head_towards);
    var hit_towards_y = y + lengthdir_y(step_size * 2, head_towards);
    
    
    if (load_time &lt; 0) {
        loaded = true;
    } else {
        load_time--;
    }
    
    var hurt_instance = collision_circle(hit_towards_x, hit_towards_y, 16, obj_minion_1, true, true);
    if (hurt_instance) {
        if (loaded) {
        console_log("Slim bob: " + string(self.player.number));
            if (hurt_instance.player == false || hurt_instance.player.number != self.player.number) {
                loaded = false;
                load_time = load_speed;
                var swipe = instance_create(x, y, obj_swipe);
                swipe.image_angle = head_towards;
                hurt_instance.hp -= random_range(damage_min, damage_max)/hurt_instance.armor;
                if (hurt_instance.hp &lt;= 0) {
                    with (hurt_instance) {
                        event_user(0);
                        particle_blood(hurt_instance.x, hurt_instance.y, 20, point_direction(x, y, hurt_instance.x, hurt_instance.y));
                        instance_destroy();
                    }
                } else {
                    particle_blood(hurt_instance.x, hurt_instance.y, 10, point_direction(x, y, hurt_instance.x, hurt_instance.y));
                }
                audio_play_sound(snd_hit, 1, false);
            }
        }
    } else {
        var current_speed = move_speed;
        if (place_meeting(x, y, obj_slow)) {
            current_speed = move_speed / 2;
        }
        mp_potential_step(move_towards_x, move_towards_y, current_speed, false);
    }
    if (!waiting_to_move) {
        particle_dust(x, y, 3);
    }
}

if (head_towards &lt; 90 || head_towards &gt; 270) {
    image_xscale = 1;
} else {
    image_xscale = -1;
}

real_speed = point_distance(x, y, xprevious, yprevious);
if (real_speed &lt;= 0) {
    image_speed = 0.16;
} else {
    image_speed = 0.25;
}

depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dead
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(abs(1 - hp / hp_max));
var width = 32 * (hp / hp_max);
draw_line_color(x - 16, y + health_y_offset, x - 16 + width, y + health_y_offset, c_red, c_red);
//draw_healthbar(x - 16, y + health_y_offset, x + 16, y + health_y_offset + 1, (hp / hp_max) * 100, c_red, c_red, c_green, 0, true, false);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_bro) {
    if (real_speed &lt;= 0) {
        draw_sprite_ext(spr_legs_idle, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    } else {
        draw_sprite_ext(spr_legs, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
    if (load_time &gt; 0) {
        switch (player.number) {
            case 1: {
                draw_sprite_ext(spr_punch_1, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 2: {
                draw_sprite_ext(spr_punch_2, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 3: {
                draw_sprite_ext(spr_punch_3, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 4: {
                draw_sprite_ext(spr_punch_4, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
        }
    } else {
        switch (player.number) {
            case 1: {
                draw_sprite_ext(spr_arm_1, image_index, x, y + (image_index / 2 % 2), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                draw_sprite_ext(spr_body_1, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 2: {
                draw_sprite_ext(spr_arm_2, image_index, x, y + (image_index / 2 % 2), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                draw_sprite_ext(spr_body_2, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 3: {
                draw_sprite_ext(spr_arm_3, image_index, x, y + (image_index / 2 % 2), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                draw_sprite_ext(spr_body_3, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
            case 4: {
                draw_sprite_ext(spr_arm_4, image_index, x, y + (image_index / 2 % 2), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                draw_sprite_ext(spr_body_4, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                break;
            }
        }
    }
/*
    if (real_speed &lt;= 0) {
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    } else {
        draw_sprite_ext(spr_legs, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(spr_body, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
    */
} else {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
